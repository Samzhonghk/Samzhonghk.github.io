<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sam Zhong]]></title>
  <link href="http://samzhonghk.github.io/atom.xml" rel="self"/>
  <link href="http://samzhonghk.github.io/"/>
  <updated>2016-09-25T22:42:35+13:00</updated>
  <id>http://samzhonghk.github.io/</id>
  <author>
    <name><![CDATA[Sam Zhong]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seventh Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/25/seventh-day-of-music-store-project-sammusicstore/"/>
    <updated>2016-09-25T18:58:02+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/25/seventh-day-of-music-store-project-sammusicstore</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Shopping Cart with Ajax Updates</h3>

<h4>Allow users to place albums in their cart without registering, but they’ll need to register as guests to complete checkout. The shopping and checkout process will be separated into two controllers: a ShoppingCart Controller which allows anonymously adding items to a cart, and a Checkout Controller which handles the checkout process. We’ll start with the Shopping Cart in this section, then build the Checkout process in the following section.</h4>

<h5>Adding the Cart, Order, and OrderDetail model classes</h5>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/CartModel.jpg" width="550" height="550" title="'Cart Model'" ></p>

<h5>Order class</h5>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/OrderModel.jpg" width="550" height="550" title="'Order Model'" ></p>

<h5>This class tracks summary and delivery information for an order. It won’t compile yet, because it has an</h5>

<p>OrderDetails navigation property which depends on a class I haven’t created yet. Let’s fix that now by adding a class named OrderDetail.cs, adding the following code.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/OrderDetailModel.jpg" width="550" height="550" title="'Order Detail Model'" ></p>

<h4>Update  SamMusicStoreEntities class to include DbSets which expose those new Model classes, also including a DbSet<Artist>. The updated SamMusicStoreEntities class appears as below.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/UpdatedDbcontextModel.jpg" width="550" height="550" title="'Updated Dbcontext Model'" ></p>

<h3>Managing the Shopping Cart business logic</h3>

<h4>I will create the ShoppingCart class in the Models folder. The ShoppingCart model handles data access to the Cart table. Additionally, it will handle the business logic to for adding and removing items from the shopping cart.</h4>

<h4>The ShoppingCart class exposes the following methods:</h4>

<p>-AddToCart takes an Album as a parameter and adds it to the user’s cart. Since the Cart table tracks quantity for each album, it includes logic to create a new row if needed or just increment the quantity if the user has already ordered one copy of the album.
-RemoveFromCart takes an Album ID and removes it from the user’s cart. If the user only had one copy of the album in their cart, the row is removed.
-EmptyCart removes all items from a user’s shopping cart.
-GetCartItems retrieves a list of CartItems for display or processing.
-GetCount retrieves a the total number of albums a user has in their shopping cart.
-GetTotal calculates the total cost of all items in the cart.
-CreateOrder converts the shopping cart to an order during the checkout phase.
-GetCart is a static method which allows our controllers to obtain a cart object. It uses the GetCartId method to handle reading the CartId from the user’s session. The GetCartId method requires the HttpContextBase so that it can read the user’s CartId from user’s session.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-Index.jpg" width="550" height="550" title="'shoppingCartController-Index method'" ></p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-AddToCart.jpg" width="550" height="550" title="'shoppingCartController-AddToCart method'" ></p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-RemoveFromCart.jpg" width="550" height="550" title="'shoppingCartController-RemoveFromCart'" ></p>

<h4>Now we need to add a View Model folder</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/addViewModelFolder.jpg" width="550" height="550" title="'Add ViewModel Folder'" ></p>

<h4>Now add a ShoppingCartViewModel class in the ViewModels folder</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartViewModel.jpg" width="550" height="550" title="'ShoppingCartViewModel'" ></p>

<h4>Add the shoppingCartRemoveViewModel to the ViewModels folder with the following four properties.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartRemoveModel.jpg" width="550" height="550" title="'ShoppingCartRemoveModel'" ></p>

<h3>The Shopping Cart Controller</h3>

<blockquote><p>The Shopping Cart controller has three main purposes: adding items to a cart, removing items from the cart, and</p></blockquote>

<p>viewing items in the cart. It will make use of the three classes we just created: ShoppingCartViewModel, ShoppingCartRemoveViewModel, and ShoppingCart. As in the StoreController and StoreManagerController, I will add a field to hold an instance of SamMusicStoreEntities.</p>

<h4>Add a new Shopping Cart controller to the project using the Empty controller template.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/addShoppingCartController.jpg" width="650" height="650" title="'Add ShoppingCart Controller'" >
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addShoppingCartController2.jpg" width="650" height="650" title="'Add ShoppingCart Controller'" ></p>

<h4>Update ShoppingCart controller</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-Index.jpg" width="550" height="550" title="'shoppingCartController-Index method'" ></p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-AddToCart.jpg" width="550" height="550" title="'shoppingCartController-AddToCart method'" ></p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-RemoveFromCart.jpg" width="550" height="550" title="'shoppingCartController-RemoveFromCart'" ></p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/shoppingCartController-CartSummary.jpg" width="650" height="650" title="'shoppingCartController-CartSummary'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fifth Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/25/fifth-day-of-music-store-project-sammusicstore/"/>
    <updated>2016-09-25T16:07:19+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/25/fifth-day-of-music-store-project-sammusicstore</id>
    <content type="html"><![CDATA[<!--more-->


<h3>In the past a few days, I was trying to load the data from database and displaying it. Now I will also enable editing the data.</h3>

<h3>Now I will create a new controller called StoreManagerController. For this controller, I will be taking advantage of the Scaffolding features available in the ASP.NET MVC Tools Update. Set the options for the Add Controller dialog as shown below.</h3>

<h3>When I click the Add button, you’ll see that the ASP.NET MVC scaffolding mechanism does a good amount of work:</h3>

<p>-It creates the new StoreManagerController with a local Entity Framework variable
-It adds a StoreManager folder to the project’s Views folder
-It adds Create.cshtml, Delete.cshtml, Details.cshtml, Edit.cshtml, and Index.cshtml view, strongly typed to the Album class
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/storeManagerController.jpg" width="650" height="650" title="'Store Manager Controller'" ></p>

<h5>The new StoreManager controller class includes CRUD (create, read, update, delete) controller actions which know how to work with the Album model class and use our Entity Framework context for database access.</h5>

<h4>Start with a quick edit to the StoreManager Index view (/Views/StoreManager/Index.cshtml). This view will display a table which lists the Albums in our store with Edit / Details / Delete links, and includes the Album’s public properties. I will remove the AlbumArtUrl field, as it’s not very useful in this display. In <table> section of the view code, remove the th and td elements surrounding AlbumArtUrl references</h4>

<h3>First Look at the Store Manager</h3>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/indexListDisplay.jpg" width="650" height="650" title="'Index List Display'" ></p>

<h4>To click the Edit link displays an edit form with fields for the Album, including dropdowns for Genres and Artist.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/editAlbum.jpg" width="650" height="650" title="'Edit Album'" ></p>

<h4>Click the “Back to List” link at the bottom, then click on the Details link for an Album. This displays the detail information for an individual Album.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/detailsAlbum.jpg" width="550" height="550" title="'Details Album'" ></p>

<h4>Again, click the Back to List link, then click on a Delete link. This displays a confirmation dialog, showing the album details and asking if sure I want to delete it.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/deleteAlbum.jpg" width="550" height="550" title="'Delete Album'" ></p>

<h4>Clicking the Delete button at the bottom will delete the album and return to the Index page, which shows the album deleted.</h4>

<h4>The index view retrieves a list of Albums, including each album’s referenced Genre and Artist information, as I previously saw when working on the Store Browse method. The Index view is following the references to the linked objects so that it can display each album’s Genre name and Artist name, so the controller is being efficient and querying for this information in the original request.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/storeManagerControllerIndex.jpg" width="550" height="550" title="'StoreManager Controller Index'" ></p>

<h4>The StoreManager Controller’s Details controller action works exactly the same as the Store Controller Details action I wrote previously - it queries for the Album by ID using the Find() method, then returns it to the view.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/StoreManagerControllerDetails.jpg" width="550" height="550" title="'StoreManager Controller Details'" ></p>

<h3>The Create Action Methods</h3>

<h5>When a user first visits /StoreManager/Create/ they will be shown an empty form. This HTML page will contain a <form> element that contains dropdown and textbox input elements where they can enter the album’s details.</h5>

<h5>After the user fills in the Album form values, they can press the “Save” button to submit these changes back to our application to save within the database. When the user presses the “save” button the <form> will perform an HTTP-POST back to the /StoreManager/Create/ URL and submit the <form> values as part of the HTTP-POST.</h5>

<h4>The ViewBag</h4>

<h5>The ViewBag is a dynamic object, meaning that you can type ViewBag.Foo or ViewBag.YourNameHere without writing code to define those properties. In this case, the controller code uses ViewBag.GenreId and ViewBag.ArtistId so that the dropdown values submitted with the form will be GenreId and ArtistId, which are the Album properties they will be setting.</h5>

<h4>The HTTP-GET Create action is pretty simple - two SelectLists are added to the ViewBag, and no model object is passed to the form (since it hasn’t been created yet).</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/storeManagerControllerCreate.jpg" width="650" height="650" title="'StoreManager Controlle Create method'" ></p>

<h5>This action has four responsibilities:</h5>

<p>1.Read the form values
2.Check if the form values pass any validation rules
3.if the form submission is valid, save the data and display the updated list
4.If the form submission is not valid, redisplay the form with validation errors.</p>

<h5>The controller action is processing a form submission that includes values for GenreId and ArtistId (from the drop down list) and textbox values for Title, Price, and AlbumArtUrl. While it’s possible to directly access form values, a better approach is to use the Model Binding capabilities built into ASP.NET MVC. When a controller action takes a model type as a parameter, ASP.NET MVC will attempt to populate an object of that type using form inputs (as well as route and querystring values). It does this by looking for values whose names match properties of the model object, e.g. when setting the new Album object’s GenreId value, it looks for an input with the name GenreId. When you create views using the standard methods in ASP.NET MVC, the forms will always be rendered using property names as input field names, so this the field names will just match up.</h5>

<h4>Saving the submitted values</h4>

<h5>If the form submission passes validation, it’s time to save the values to the database. With Entity Framework, that just requires adding the model to the Albums collection and calling SaveChanges.</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C#'><span class='line'><span class="n">db</span><span class="p">.</span><span class="n">Album</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">album</span><span class="p">);</span>
</span><span class='line'><span class="n">db</span><span class="p">.</span><span class="n">SaveChanges</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Entity Framework generates the appropriate SQL commands to persist the value. After saving the data, we redirect back to the list of Albums so we can see our update. This is done by returning RedirectToAction with the name of the controller action we want displayed. In this case, that’s the Index method.</p></blockquote>

<h4>Now I will test the Create form</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/CreateAlbumViewAfterValidation.jpg" width="550" height="550" title="'Create Album View After Validation'" ></p>

<h4>Deletion follows the same pattern as Edit and Create, using one controller action to display the confirmation form, and another controller action to handle the form submission.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/deleteComfirmSubmit.jpg" width="550" height="550" title="''" ></p>

<h4>Display a form that’s strongly typed to an Album type, using the Delete view content template.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/deleteAlbum.jpg" width="550" height="550" title="'Delete Album'" ></p>

<h4>Clicking the Delete button causes the form to be posted back to the server, which executes the DeleteConfirmed action.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/deleteComfirmMethod.jpg" width="550" height="550" title="'Delete Comfirm Method'" ></p>

<h5>HTTP-POST Delete Controller Action takes the following actions:</h5>

<p>1.Loads the Album by ID
2.Deletes it the album and save changes
3.Redirects to the Index, showing that the Album was removed from the list</p>

<h4>The updated screen will be displayed after the confirmation.</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eighth Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/19/eighth-day-of-music-store-project-sammusicstore/"/>
    <updated>2016-09-19T20:40:18+12:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/19/eighth-day-of-music-store-project-sammusicstore</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Ajax Updates with jQuery</h3>

<blockquote><p>However, instead of using an Html.ActionLink to remove items from the cart, I will use jQuery to “wire up” the click event for all links in this view which have the HTML class RemoveLink. Rather than posting the form, this click event handler will just make an AJAX callback to RemoveFromCart controller action. The RemoveFromCart returns a JSON serialized result, which is automatically passed to the JavaScript method specified in our AjaxOptions OnSuccess parameter – handleUpdate in this case. The handleUpdate Javascript function parses the JSON results and performs four quick updates to the page using jQuery:
1.Removes the deleted album from the list
2.Updates the cart count in the header
3.Displays an update message to the user
4.Updates the cart total price</p></blockquote>

<h4>Here is the complete code for the ShoppingCart/Index view</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/.jpg" width="550" height="550" title="''" ></p>

<blockquote><p>In order to test this out, I will add items to our shopping cart. I will update Store Details view to include an “Add to cart” button. While at it, I can include some of the Album additional information which I have added since I last updated this view: Genre, Artist, Price, and Album Art. The updated Store Details view code appears as shown below.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Html'><span class='line'>@model SamMvcMusicStore.Models.Album
</span><span class='line'>
</span><span class='line'>@{
</span><span class='line'>
</span><span class='line'>ViewBag.Title = &quot;Album - &quot; + Model.Title;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>@Model.Title<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">alt=</span><span class="s">&quot;@Model.Title&quot;</span> <span class="na">src=</span><span class="s">&quot;@Model.AlbumArtUrl&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;album-details&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;em&gt;</span>Genre:<span class="nt">&lt;/em&gt;</span> @Model.Genre.Name
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;em&gt;</span>Artist:<span class="nt">&lt;/em&gt;</span> @Model.Artist.Name
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;em&gt;</span>Price:<span class="nt">&lt;/em&gt;</span> @String.Format(&quot;{0:F}&quot;, Model.Price)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>@Html.ActionLink(&quot;Add to cart&quot;, &quot;AddToCart&quot;, &quot;ShoppingCart&quot;, new { id = Model.AlbumId }, &quot;&quot;)
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sixth Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/15/sixth-day-of-music-store-project-sammusicstore/"/>
    <updated>2016-09-15T17:43:22+12:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/15/sixth-day-of-music-store-project-sammusicstore</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Using Data Annotations for Model Validation</h3>

<h4>Now I have a major issue with our Create and Edit forms: they’re not doing any validation. I can do things like leave required fields blank or type letters in the Price field, and the first error we’ll see is from the database.</h4>

<h4>Adding Validation to our Album Forms</h4>

<p>-Required – Indicates that the property is a required field
-DisplayName – Defines the text we want used on form fields and validation messages
-StringLength – Defines a maximum length for a string field
-Range – Gives a maximum and minimum value for a numeric field
-Bind – Lists fields to exclude or include when binding parameter or form values to model properties
-ScaffoldColumn – Allows hiding fields from editor forms</p>

<h4>Edit the validation elements to Album class</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/AlbumValidation.jpg" width="550" height="550" title="'Album Validation'" ></p>

<h5>Now Test the validation on the server side</h5>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/CreateAlbumViewAfterValidation.jpg" width="550" height="550" title="'Create Album View After Validation'" ></p>

<h4>Server-side validation is very important from an application perspective, because users can circumvent client-side validation. However, webpage forms which only implement server-side validation exhibit three significant problems.</h4>

<p>1.The user has to wait for the form to be posted, validated on the server, and for the response to be sent to their browser.
2.The user doesn’t get immediate feedback when they correct a field so that it now passes the validation rules.
3.We are wasting server resources to perform validation logic instead of leveraging the user’s browser.</p>

<h4>After inputing the correct information</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/correctValidation.jpg" width="550" height="550" title="'Correct Validation'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fourth Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/15/fourth-day-of-music-store-project/"/>
    <updated>2016-09-15T13:44:33+12:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/15/fourth-day-of-music-store-project</id>
    <content type="html"><![CDATA[<!--more-->


<h3>The database configuration has been set up. At this moment I will add some seed data in the database. Since I have added a seed data class in the model folder, therefore I need to tell Entity Framework about the seed data class.</h3>

<h4>Config the Application_Start method</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/GlobalFileSetup.jpg" width="650" height="650" title="'image'" ></p>

<h4>At this point, I have completed the work necessary to configure Entity Framework for my store project.</h4>

<h5>Now I will try to update the store index action to retrieve all Genres in our database.</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">db</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SamMusicStore</span><span class="p">()){</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">genres</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Genres</span><span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">genres</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The list of Genres will be displayed when I run and visit the the “/Store” URL</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/genresListView.jpg" width="650" height="650" title="'image'" ></p>

<blockquote><p>I will take advantage of an Entity Framework feature that allows for indicating other related entities I want loaded as well when the Genre object is retrieved. This feature is called Query Result Shaping, and enables reducing the number of times we need to access the database to retrieve all of the information that will be required. I want to pre-fetch the Albums for Genre we retrieve, so I will update our query to include from
Genres.Include(“Albums”) to indicate that I want related albums as well. This is more efficient, since it will retrieve both our Genre and Album data in a single database request.</p></blockquote>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/BrowseActionMethod.jpg" width="650" height="650" title="image" alt="Browse Action Method"></p>

<h4>Then update the Store Browse to display the albums which are available in each Genre and add a list of Albums in the view template.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/BrowseListView.jpg" width="650" height="650" title="image" alt="Browse List View"></p>

<h4>Run the application and browsing to /Store/Browse?genre=Jazz shows that our results are now being pulled from the database, displaying all albums in selected Genre.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/browseGenreJazz.jpg" width="650" height="650" title="image" alt="browse Genre Jazz"></p>

<h4>Make the same change to our /Store/Details/[id] URL, and replace dummy data with a database query which loads an Album whose ID matches the parameter value.</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C#'><span class='line'><span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Details</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">album</span> <span class="p">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Album</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">album</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Now the Store Details page is set up to display an album by the Album ID, then update the Browse view to link to the Details view. I will use Html.ActionLink, exactly as I did to link from Store Index to Store Browse at the end of the previous section. The complete source for the Browse view appears below.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/genreDisplayList.jpg" width="650" height="650" title="image" alt="Genre Display List"></p>

<h4>I am now able to browse from our Store page to a Genre page, which lists the available albums, and by clicking on an album we can view details for that album.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/displayJazzGenreView.jpg" width="650" height="650" title="image" alt="Display Jazz Genre View"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/08/third-day-of-music-store-project-sammusicstore/"/>
    <updated>2016-09-08T15:10:43+12:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/08/third-day-of-music-store-project-sammusicstore</id>
    <content type="html"><![CDATA[<!--more-->


<h3>So far, in the past two days I have been passing &ldquo;dummy data&rdquo; from controllers to views. Now I am going to hook up a real database.</h3>

<h4>Database access with Entity Framework Code-First</h4>

<blockquote><p>Apply the Entity Framework(EF) support that is included in ASP.NET MVC4 project to query and update the database. EF is a flexible object relational mapping(ORM) data API that enables developers to query and update data stored in a database in an object-oriented way.</p>

<p>EF supports a development paradigm called Code-First. Code-First allows you to create model object by writing simple classes(also known as POCO from &ldquo;plain-old&rdquo; CLR objects).</p></blockquote>

<h4>Adding the Artists model class and associate it with Albums</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/ArtistModel.jpg" width="650" height="650" title="image" alt="images"></p>

<h4>Update the Album class</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/addAlbumProperties.jpg" width="650" height="650" title="image" alt="images"></p>

<h4>Update Genre class</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/GerneClassProperties.jpg" width="650" height="650" title="image" alt="images"></p>

<h4>Creating a connection string in the web.config file</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/connectStringSetup.jpg" width="650" height="650" title="image" alt="images"></p>

<h4>Adding a context class</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/CreateEntity.jpg" width="650" height="650" title="image" alt="images"></p>

<blockquote><p>This class will represent the EF database context, and will handle the create, read, update, and delete operation.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second Day of Music Store Project(SamMusicStore)]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/07/second-day-of-music-store-project-sammusicstore/"/>
    <updated>2016-09-07T11:40:08+12:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/07/second-day-of-music-store-project-sammusicstore</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Using model to pass information to view</h3>

<p>Today I am going to make a dynamic web site, I will instead pass informaiton from controller actions to view templates.</p>

<h4>In the Model-View-Controller pattern, the term Model refers to object which represent the data in the application. Often, model objects correspond to tables in your database, but they do not have to.</h4>

<p>1.Now I will create a class called &lsquo;Genre&rsquo;.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addGenreClass.jpg" width="350" height="350" title="image" alt="images"></p>

<p>This is the details action
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/DetailsAction.jpg" width="350" height="350" title="image" alt="images">
2.Modify the logic to return an Album object to the view(Dummy data here)</p>

<p>3.Add a related detail view by right click on the details action name and take the Album as the model class.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addDetailsView.jpg" width="350" height="350" title="image" alt="images"></p>

<p>4.Make an update for the Store Browse action method. The method returns an ActionResult, and modify the method logic so it creates a new Genre object and returns it to the view.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/editBrowerAction.jpg" width="350" height="350" title="image" alt="images"></p>

<p>5.Add a related view to method and take Genre as the model.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addBrowerView.jpg" width="350" height="350" title="image" alt="images"></p>

<p>6.Now I will update the Store Index action method and view to display a list of all the Genres in our store.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/editIndexAction.jpg" width="350" height="350" title="image" alt="images"></p>

<p>7.Add a view to the Index method and select Genre as the model class.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addIndexView.jpg" width="350" height="350" title="image" alt="images"></p>

<p>8.Then I will change the @model declaration to indicate that the view will be expecting several Genre objects rather than just one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">@model</span> <span class="n">IEnumberable</span><span class="p">&lt;</span><span class="n">SamMvcMusic</span><span class="p">.</span><span class="n">Model</span><span class="p">.</span><span class="n">Genre</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>9.Loop through the Genre objects in the model as shown below
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/editIndexView.jpg" width="350" height="350" title="image" alt="images"></p>

<h4>The count and list of Gernes is displayed when the application is ran.</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/IndexViewDisplay.jpg" width="450" height="450" title="image" alt="images"></p>

<h3>Adding links between pages</h3>

<p>Html.ActionLink() has several different overloads to allow specifying as much informaiton as the need for links. In the simplest case, just to supply the link text and the action method to go to when the hyperlink is clicked on the client.</p>

<blockquote><p>Our links to the Browse page will need to pass a parameter, though, so we’ll use another overload of the</p>

<p>Html.ActionLink method that takes three parameters:</p>

<p>1.Link text, which will display the Genre name</p>

<p>2.Controller action name (Browse)</p>

<p>3.Route parameter values, specifying both the name (Genre) and the value (Genre name)</p></blockquote>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/editIndexView.jpg" width="650" height="650" title="image" alt="images"></p>

<h4>Now when we run our project again and access the /Store/ URL we will see a list of genres. Each genre is a hyperlink – when clicked it will take us to our /Store/Browse?genre=[genre] URL.</h4>

<p>The HTML for the genre list looks like this:
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/indexLinkExample.jpg" width="650" height="650" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Day of Music Store Project]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/09/06/first-day-of-music-store-project/"/>
    <updated>2016-09-06T15:32:16+12:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/09/06/first-day-of-music-store-project</id>
    <content type="html"><![CDATA[<!--more-->


<h3>Today I am going to create a music store project. Let&rsquo;s call it SamMusicStore.</h3>

<p>We will be applying ASP.NET MVC and Visual Studio 2013 to develop the music store.</p>

<p>1.We will create a new project in Visual Studio
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/NewProject.jpg" width="350" height="350" title="image" alt="images">
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/buildProjectWnd.jpg" width="350" height="350" title="image" alt="images">
2.Select the ASP.NET MVC Web Application and name it as SamMvcMusic</p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/ChooseTemplate.jpg" width="350" height="350" title="image" alt="images">
3.Select a template which is MVC.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/projectContent.jpg" width="350" height="350" title="image" alt="images">
This is the project content of the new created SamMusicStore MVC project.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/addHomeController.jpg" width="350" height="350" title="image" alt="images">
4.Now I will add a controller and name it Home</p>

<p><img class="left" src="http://samzhonghk.github.io/images/SamMvc/HomeController.jpg" width="350" height="350" title="image" alt="images">
This is what HomeController looks like.</p>

<p>5.Now let us add a StoreController to implement the browsing functionality of    SamMusicStoremusic
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/AddStoreController.jpg" width="350" height="350" title="image" alt="images"></p>

<p>Store controller will support three scenarios:
-A listing page of the music genres in our music store
-A browse page that lists all of the music albums in a particular genre
-A details page that shows information about a specific music album</p>

<p>6.I am adding an index view in the new view. The &ldquo;Add View&rdquo; dialog allows us to generate view template files.
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addHomeIndexView.jpg" width="350" height="350" title="image" alt="images"></p>

<p>This is the content of the index view
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/HomeIndexView.jpg" width="350" height="350" title="image" alt="images"></p>

<h2>Using a Layout for common site elements</h2>

<p>Most websites have content which is shared between many pages: navigation, footers, logo images, stylesheet references, etc. The Razor view engine makes this easy to manage using a page called Layout.cshtml which has automatically been created for us inside the /Views/Shared folder.</p>

<p>This is the layout file
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addNewContentToLayout.jpg" width="350" height="350" title="image" alt="images">
The content from our individual views will be displayed by the @RenderBody() command, and any common content that we want to appear outside of that can be added to the Layout.cshtml markup.</p>

<p>7.Now I will add some required references to the layout.cshtml
<img class="left" src="http://samzhonghk.github.io/images/SamMvc/addReferenceToLayout.jpg" width="350" height="350" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outlet and Action]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/03/16/outlet-and-action/"/>
    <updated>2016-03-16T20:04:47+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/03/16/outlet-and-action</id>
    <content type="html"><![CDATA[<!--more-->


<h4>Outlet and Action are ways that ViewController interacts with its view.In fact,they serve different purpose though both of them may look similar during initial days of iOS acquaintance.</h4>

<h2>Outlet</h2>

<h4><em>ViewController talks to View by using Outlet.</em></h4>

<p> Any object(UILabel,UIButton,UIImage,UIView etc) in View can have an Outlet connection to ViewController.Outlet is used as <em>@property</em> in ViewController which means that:</p>

<blockquote><p>you can set something(like Update UILabel&rsquo;s text,Set background image of a UIView etc.)of an object by using outlet.
you can get something from an object(like current value of UIStepper,current font size of a NSAttributedString etc.)</p></blockquote>

<p>1.The Outlet gives your class(typically a view controller) a reference to a child view in the xib.
2.The outlet gives the obj-c code access to anobject in IB.
3.Outlet is used when you want to change some property of control such as text color or text size of a label.</p>

<h2>Action</h2>

<p><em>View pass on messages about view to ViewController by using Action</em>   (Or in technical terms ViewController set itself as <em>target</em> for any <em>Action</em> in View).Action is a <em>Method</em> in ViewController(unlike Outlet which is <em>@property</em> in ViewController).Whenever something(any <em>Event</em>) happens to an object(like UIButton is tapped) then Action pass on message to ViewController.Action(or action method) can do something after receiving the message.</p>

<p>Note: <em>Action can be set only by UIControl&rsquo;s child object.Which means you can not set Action for UILabel,UIView etc.</em></p>

<p>1.The action provides a method to be called by a control(usually also a child view on the xib)when activated by the user.
2.The action gives the xib control access to the obj-c.
3.Action is used when you want to detect a trigger such as the button is pressed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The disappeared pin menu in Xcode7]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/02/21/the-disappeared-pin-menu-in-xcode7/"/>
    <updated>2016-02-21T17:26:01+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/02/21/the-disappeared-pin-menu-in-xcode7</id>
    <content type="html"><![CDATA[<!--more-->


<p>We may all probably know the size of layout in Xcode can be changed by pin in the former versions.There are four choices can be used to reset the distances around the control,they are Top Space,Leading Space,Trailing Space and Bottom Space.</p>

<p>There are two methods can be selected to employ pin in Xcode6:
-Apply through the menu:Editor -> pin</p>

<p>-Apply the pin button which is located at the bottom of designer.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/pinOld.png" width="450" height="450" title="image" alt="images"></p>

<p>There are some differences between these two methods.
-The top space distance to superview can be modified directly through the pin button on the menu(Editor->pin)</p>

<p>-The distance to the last view will be selected according to the distance of the presented view if using that pin button.(not necessarily superview)</p>

<h4>Unfortunely&hellip;the pin function can not be found anymore if the Xcode has been updated to Xcode7.</h4>

<h5>After long time searching,the answer has been found finally.</h5>

<p>The answer is right here:<a href="" title="http://stackoverflow.com/questions/28766210/autolayout-add-constraint-to-superview-and-not-top-layout-guide">How to use pin function after Xcode version5</a></p>

<p>There is an arrow towards the bottom on the right side,a couple choices will be appeared if the arrow is clicked.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/pinNew.png" width="450" height="450" title="image" alt="images"></p>

<p>As we can see,the &ldquo;Top Layout Guide&rdquo; has been automatically clicked.The Superview can be controlled if the View button has been chosen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Browser Development Project]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/01/25/ios-browser-development-project/"/>
    <updated>2016-01-25T03:03:45+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/01/25/ios-browser-development-project</id>
    <content type="html"><![CDATA[<!--more-->


<p>This is a step by step tutorial of building a simple browser using single view application of Swift</p>

<h3>1.To create a new project by Swift using single view application in Xcode.</h3>

<h3>2.Open Main.storyboard file in project files and drag three view controllers to drawing area.</h3>

<p>They are:</p>

<h4>TextField</h4>

<h4>Button</h4>

<h4>Web View</h4>

<p><img class="left" src="http://samzhonghk.github.io/images/15.jpg" width="450" height="450" title="image" alt="images"></p>

<p>3.Drag those three view controllers to ViewController.swift file one by one pressing control button and the codes below will be generated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">urlInput</span><span class="p">:</span><span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'><span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">urlButton</span><span class="p">:</span><span class="bp">UIButton</span><span class="o">!</span>
</span><span class='line'><span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">webView</span><span class="p">:</span><span class="bp">UIWebView</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.Add an action event to the button</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="p">@</span><span class="kt">IBAction</span> <span class="k">func</span> <span class="n">buttonClick</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span><span class="n">AnyObject</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//Access via url</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">webview</span><span class="p">.</span><span class="n">loadRequest</span><span class="p">(</span><span class="bp">NSURLRequest</span><span class="p">(</span><span class="nl">URL</span><span class="p">:</span><span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span><span class="n">urlInput</span><span class="p">.</span><span class="n">text</span><span class="o">!</span><span class="p">)</span><span class="o">!</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.Compile the codes with pressing command+R,the errors will be reported as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="n">wift_browser</span><span class="p">[</span><span class="mi">656</span><span class="o">:</span><span class="mi">22577</span><span class="p">]</span> <span class="n">App</span> <span class="n">Transport</span> <span class="n">Security</span> <span class="n">has</span> <span class="n">blocked</span> <span class="n">a</span> <span class="n">cleartext</span> <span class="n">HTTP</span> <span class="p">(</span><span class="nl">http</span><span class="p">:</span><span class="c1">//) resource load since it is insecure. Temporary exceptions can be configured via your app&#39;s Info.plist file.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The HTTP resource request via HTTP(<a href="http://">http://</a>) will be recognized as insecure and the related configuration can be reconfigured via Info.plist file.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/16.png" width="600" height="600" title="image" alt="images"></p>

<p>6.Finally,the project of the simple browser can be successfully compiled as below.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/17.jpg" width="450" height="450" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode project templates introduction]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/01/21/Xcode-project-templates/"/>
    <updated>2016-01-21T19:00:09+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/01/21/Xcode-project-templates</id>
    <content type="html"><![CDATA[<!--more-->


<p>Today I will be introducing the project templates in IOS development.</p>

<p>As we can see from the IOS templates board.There are four Application templates except for the game template.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/4.jpg" width="450" height="450" title="image" alt="images"></p>

<h3>*Master-Detail Application</h3>

<h3>*Page-Based Application</h3>

<h3>*Single View Application</h3>

<h3>*Tabbed Application</h3>

<h2>Master-Detail Application</h2>

<p>This template provides a starting point for a master-detail application. It provides a user interface configured with a navigation controller to display a list of items and also a split view on iPad.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/5.jpg" width="450" height="450" title="image" alt="images"></p>

<p>This is the initial template of Master-Detail Application.The information of date will be listed on the list below when the &lsquo;Plus Sign&rsquo; is clicked.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/6.jpg" width="450" height="450" title="image" alt="images"></p>

<p>Afterward,the detail of the date will be shown when we click on the information bar.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/7.jpg" width="450" height="450" title="image" alt="images"></p>

<p>The experienced programmers will find that the navigation mode for iPhone and Split mode for iPad have not been used.But Master-Detail Application is the combined mode of those two modes.
In fact,the Navigation mode can be used when the Master-Detail Application is chosen for iPhone and the Split mode can be used when the Master-Detail Application is taken for iPad.</p>

<p>The applications that are similar with Mail can be built using Master-Detail mode.
As we can see below,the navigation bar on the left hand side is master and the detail information on the right hand side of each mail is &lsquo;Detail&rsquo;.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/8.png" width="450" height="450" title="image" alt="images"></p>

<p><img class="left" src="http://samzhonghk.github.io/images/9.png" width="450" height="450" title="image" alt="images"></p>

<h2>Tabbed Application</h2>

<p>This template provides a starting point for an application that uses a tab bar. It provides a user interface configured with a tab bar controller, and view controllers for the tab bar items.</p>

<p>The content of Tab bar and the related view controllers can be controlled by the codes.</p>

<p>The applications that are similar with iTunes can be built using Tabbed template.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/12.jpg" width="450" height="450" title="image" alt="images"></p>

<p><img class="left" src="http://samzhonghk.github.io/images/13.jpg" width="450" height="450" title="image" alt="images"></p>

<h2>Page-Based Application</h2>

<p>This template provides a starting point for a page-based application that uses a page view controller.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/11.jpg" width="450" height="450" title="image" alt="images"></p>

<p>The applications that are based on page can be generated using the &lsquo;Page-based Application&rsquo; mode.</p>

<p>As we can see below,the effects can be achieved using Page-Based Application.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/10.jpg" width="450" height="450" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Inheritance and Polymorphism in Swift]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/01/08/the-inheritance-and-polymorphism-in-swift/"/>
    <updated>2016-01-08T13:28:07+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/01/08/the-inheritance-and-polymorphism-in-swift</id>
    <content type="html"><![CDATA[<!--more-->


<h2>The Object-oriented of Swift</h2>

<h3>The characteristics of Inheritance</h3>

<p>1.Overriding the methods of super class.</p>

<p>2.Overriding the properties of super class.</p>

<p>3.Overriding the setter of the attributes.</p>

<p>4.Overriding the subscriber of the super class.</p>

<p>5.To prevent overriding with final.</p>

<p>-Single Inheritance:All the subclasses can only be inherited from one single base class.Nevertheless they can have more than one indirect super classes.</p>

<p>-The properties,methods and subscribers can be overridden in subclasses once they have been inherited from super class.</p>

<p>-The properties,methods and subscribers can be obtained once they have been inherited from the super classes.</p>

<p>-The classes in Swift are not inherited from one single base class in common.</p>

<p>-The key word &ldquo;override&rdquo; will be needed to declared when the inherited part needs to be overridden.</p>

<h4>Now let us get started from an simple example</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">Fruit</span><span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">weight</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">func</span> <span class="nf">info</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;This is a fruit,it is \(weight)g!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Apple</span><span class="p">:</span><span class="n">Fruit</span><span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">name</span><span class="p">:</span><span class="n">String</span><span class="o">!</span><span class="p">;</span>
</span><span class='line'>  <span class="k">func</span> <span class="nf">taste</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(name) is super tasty!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">Apple</span><span class="p">();</span>
</span><span class='line'><span class="c1">//Class Apple has no property of weight.</span>
</span><span class='line'><span class="c1">//The weight property can be performed in class Apple since class Fruit is the base class of class Apple.</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Big Apple&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//Both the properties from subclasses itself and inheritance classed can be initialized after the object has been created.</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">info</span><span class="p">();</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">taste</span><span class="p">();</span>
</span><span class='line'><span class="c1">//Both the methods from super classes and subclasses can be performed once the object of the subclass has been created.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Overriding the methods of base class</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">class</span> <span class="n">Bird</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//A method called &#39;fly&#39;</span>
</span><span class='line'>  <span class="kr">override</span> <span class="k">func</span> <span class="n">fly</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;I can be flying in the sky&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Ostrich</span><span class="p">:</span><span class="n">Bird</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Overriding the &#39;fly&#39; method of class Bird</span>
</span><span class='line'>  <span class="kr">override</span> <span class="k">func</span> <span class="n">fly</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;I can be running on the ground&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Create an object of Ostrich</span>
</span><span class='line'><span class="k">var</span> <span class="n">os</span> <span class="o">=</span> <span class="n">Ostrich</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Apply the &#39;fly&#39; method of the subclass &#39;Ostrich&#39;,then the sentence &#39;I can be running on the ground&#39; will be printed.</span>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="p">.</span><span class="n">fly</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Overriding the subscriber of base classes.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">class</span> <span class="n">Base</span><span class="p">{</span>
</span><span class='line'>  <span class="k">subscript</span><span class="p">(</span><span class="nl">idx</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;The get method of subscript of base class.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">idx</span><span class="o">+</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Sub</span><span class="p">:</span><span class="n">Base</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Override the subscript of base class</span>
</span><span class='line'>  <span class="kr">override</span> <span class="k">subscript</span><span class="p">(</span><span class="nl">idx</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;The get method of subscript after overriding.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;Access the overriding subscript through super.\(super[idx])&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">idx</span><span class="o">*</span><span class="n">idx</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">set</span><span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;The setter method after overriding,the value is \(newValue)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">base</span> <span class="o">=</span> <span class="n">Base</span><span class="p">();</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">base</span><span class="p">[</span><span class="mi">7</span><span class="p">]);</span>   <span class="c1">//17 will be output</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Create an object of class Sub</span>
</span><span class='line'><span class="k">var</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">Sub</span><span class="p">();</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">sub</span><span class="p">[</span><span class="mi">7</span><span class="p">]);</span>   <span class="c1">//49 will be output</span>
</span><span class='line'><span class="n">sub</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">90</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Override the properties of super class</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">class</span> <span class="n">Bird</span><span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">speed</span><span class="p">:</span><span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Ostrich</span><span class="p">:</span><span class="n">Bird</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Override the property &#39;speed&#39; of Bird</span>
</span><span class='line'>  <span class="kr">override</span> <span class="k">var</span> <span class="nl">speed</span> <span class="p">:</span><span class="n">Double</span><span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;Accessing the overridden property&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">super</span><span class="p">.</span><span class="n">speed</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">set</span><span class="p">{</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="n">newValue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Create an object of Ostrich</span>
</span><span class='line'><span class="k">var</span> <span class="n">os</span> <span class="o">=</span> <span class="n">Ostrich</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Assign a new value to the overridden property</span>
</span><span class='line'><span class="n">os</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//output the overridden property</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;The speed of os is \(os.speed)&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Overriding the attributes observer of base class</h3>

<p>When a new property needs to be added for an inherited property, &lsquo;property overriding&rsquo; concept is introduced in Swift. This notifies the user when the inherited property value is altered. But overriding is not applicable for inherited constant stored properties and inherited read-only computed properties.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">class</span> <span class="n">Bird</span><span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">speed</span><span class="p">:</span><span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Ostrich</span><span class="p">:</span><span class="n">Bird</span><span class="p">{</span>
</span><span class='line'>  <span class="c1">//Override the property &#39;speed&#39; of Bird,adding the attributes observer</span>
</span><span class='line'>  <span class="kr">override</span> <span class="k">var</span> <span class="nl">speed</span><span class="p">:</span><span class="n">Double</span><span class="p">{</span>
</span><span class='line'>    <span class="n">didset</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">//The method will be automatically performed after the value of the attribute has been changed.</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;The value of speed will be \(oldValue) after changes&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">.</span><span class="n">speed</span> <span class="o">*=</span> <span class="n">speed</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Create the object of Ostrich</span>
</span><span class='line'><span class="k">var</span> <span class="n">os</span> <span class="o">=</span> <span class="n">Ostrich</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Assign new value to attribute after overriding.</span>
</span><span class='line'><span class="n">os</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Output the overridden attribute</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;The speed of the os is \(os.speed)&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Final property to prevent Overridding</h3>

<p>When the user need not want others to access super class methods, properties or subscripts swift introduces &lsquo;final&rsquo; property to prevent overriding. Once &lsquo;final&rsquo; property is declared the subscripts won&rsquo;t allow the super class methods, properties and its subscripts to be overridden. There is no provision to have &lsquo;final&rsquo; property in &lsquo;super class&rsquo;. When &lsquo;final&rsquo; property is declared the user is restricted to create further sub classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="n">final</span> <span class="k">class</span> <span class="n">Base</span><span class="p">{</span>
</span><span class='line'>  <span class="n">final</span> <span class="k">var</span> <span class="nl">name</span><span class="p">:</span><span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">final</span> <span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="nl">content</span><span class="p">:</span><span class="n">String</span><span class="p">){</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Base says \(content)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">final</span> <span class="nf">subscript</span><span class="p">(</span><span class="nl">idx</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;The get method of subscript of base class&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Sub</span><span class="p">:</span><span class="n">Base</span><span class="p">{</span>
</span><span class='line'>  <span class="kr">override</span> <span class="k">var</span> <span class="nl">name</span><span class="p">:</span><span class="n">String</span><span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span><span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;the prefixion of subclass&quot;</span> <span class="o">+</span> <span class="nb">super</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://samzhonghk.github.io/images/2.jpg" width="950" height="950" title="image" alt="The errors after compiling"></p>

<p>*since the super class is declared as &lsquo;final&rsquo; and its data types are also declared as &lsquo;final&rsquo; the program won&rsquo;t allow to create subclasses further and it will throw errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Up Octopress on OS X10.10.5]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/01/06/set-up-octopress-on-osx10-dot-10-dot-5/"/>
    <updated>2016-01-06T18:03:44+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/01/06/set-up-octopress-on-osx10-dot-10-dot-5</id>
    <content type="html"><![CDATA[<!--more-->


<p>This tutorial will be directing to create your own personal blog using Octopress on OS X10.10.5 and host it on github.</p>

<p>The Octopress information can be obtained from <a href="http://octopress.org/docs/">Octopress offical website</a></p>

<h2>Prerequisites on OS X10.10</h2>

<h3>Install git</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:git-core/ppa
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install git</span></code></pre></td></tr></table></div></figure>


<h3>Install ruby</h3>

<h4>Add the PPA and install the package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-add-repository -y ppa:rael-gc/rvm
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install rvm</span></code></pre></td></tr></table></div></figure>


<h4>Install a ruby</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install ruby
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p>To verify</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<h2>Prerequisites on OS X</h2>

<h3>Install homebrew</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<h3>Install git</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install git</span></code></pre></td></tr></table></div></figure>


<p>To verify</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git --version</span></code></pre></td></tr></table></div></figure>


<h3>Install ruby</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L https://get.rvm.io | bash -s stable --auto-dotfiles --autolibs=enable --ruby</span></code></pre></td></tr></table></div></figure>


<h2>Set up octopress</h2>

<h3>Install rake</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install rake</span></code></pre></td></tr></table></div></figure>


<h3>Setup octopress</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<h3>Install octopress default theme</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h3>Install other theme (optional)</h3>

<p>Install <a href="https://github.com/erikzaadi/solarized-octopress-theme">solarized</a> theme instead of default theme for this blog.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>git clone http://github.com/erikzaadi/solarized-octopress-theme .themes/solarized
</span><span class='line'>rake install["solarized"]
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p><strong>NOTE:</strong> For zsh users, try <code>rake install\['solarized'\]</code></p>

<p>For more themes, checkout <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" title="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a></p>

<h3>Github setup</h3>

<ul>
<li><p>Create a github account and my account is <a href="https://github.com/samzhonghk" title="https://github.com/samzhonghk"><code>samzhonghk</code></a>.</p></li>
<li><p>Create a new Github repository and name the repository with the format username.github.io, where username is your GitHub user name or organization name.In this case, the repository is <a href="https://github.com/samzhonghk/samzhonghk.github.io" title="https://github.com/samzhonghk/samzhonghk.github.io"><code>samzhonghk.github.io</code></a></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>The rake task will ask you for a URL of the Github repo. Copy the SSH or HTTPS URL from your newly created repository
(in this case, <a href="https://github.com/samzhonghk/samzhonghk.github.io.git">https://github.com/samzhonghk/samzhonghk.github.io.git</a>) and paste it in as a response.</p>

<p>This will:</p>

<ul>
<li>Ask for and store your Github Pages repository url.</li>
<li>Rename the remote pointing to imathis/octopress from &lsquo;origin&rsquo; to &lsquo;octopress&rsquo;</li>
<li>Add your Github Pages repository as the default origin remote.</li>
<li>Switch the active branch from master to source.</li>
<li>Configure your blog&rsquo;s url according to your repository.</li>
<li>Setup a master branch in the _deploy directory for deployment.</li>
</ul>


<h3>Create a new post</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["Your Title"]</span></code></pre></td></tr></table></div></figure>


<p>A new markdown file named <code>Your Title</code> is created in <code>source/_posts</code> folder.</p>

<h3>Preview</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>You can preview these posts on your local server <a href="http://localhost:4000" title="http://localhost:4000">http://localhost:4000</a></p>

<p><code>new_post</code> expects a naturally written title and strips out undesirable url characters when creating the filename.
The default file extension for new posts is markdown but you can configure that in the Rakefile.</p>

<h3>Deploy</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p><strong>Do not forget</strong> to push source branch to github.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h3>Config in Rakefile(optional)</h3>

<h4>Change extension name of new posts</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new_post_ext = "md"  # default new post file extension when using the new_post task</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><p><a href="https://github.com/rvm/ubuntu_rvm">https://github.com/rvm/ubuntu_rvm</a></p></li>
<li><p><a href="http://pangyi.github.io/blog/20150125/ubuntuzhong-octopressan-zhuang">http://pangyi.github.io/blog/20150125/ubuntuzhong-octopressan-zhuang</a></p></li>
<li><p><a href="https://github.com/tommy351/Octopress-Theme-Slash">https://github.com/tommy351/Octopress-Theme-Slash</a></p></li>
<li><p><a href="http://codelife.me/blog/2012/09/02/custom-domain-for-octopress">http://codelife.me/blog/2012/09/02/custom-domain-for-octopress</a></p></li>
<li><p><a href="https://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac">https://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac</a></p></li>
<li><p><a href="https://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac">https://www.moncefbelyamani.com/how-to-install-and-configure-octopress-on-a-mac</a></p></li>
<li><p><a href="http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-comments">http://asaf.github.io/blog/2013/07/08/blogging-with-octopress-add-comments</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first post]]></title>
    <link href="http://samzhonghk.github.io/blog/2016/01/05/my-first-post/"/>
    <updated>2016-01-05T19:01:52+13:00</updated>
    <id>http://samzhonghk.github.io/blog/2016/01/05/my-first-post</id>
    <content type="html"><![CDATA[<p>Happy new year everyone!Welcome to new 2016.</p>

<p>Recently I found that github is an awesome platform for sharing codes.Free space and domain can be provided for blogging.</p>

<p>Hopefully this is a good start to share my experience with everyone and get started to learn fresh tech stuff.</p>

<p><img class="left" src="http://samzhonghk.github.io/images/ab.jpg" width="350" height="350" title="image" alt="images"></p>
]]></content>
  </entry>
  
</feed>
